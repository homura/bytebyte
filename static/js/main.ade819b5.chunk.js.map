{"version":3,"sources":["analyze.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FixedNumeric","I8","U8","I16BE","I16LE","U16BE","U16LE","I32BE","I32LE","U32BE","U32LE","I64LE","I64BE","U64LE","U64BE","I128BE","I128LE","U128BE","U128LE","inputToField","input","matched","match","Error","size","beOrLe","le","byteWidth","read","buf","offset","formatByteLike","slice","write","val","convertEndian","Bytes","Number","App","useState","decodeURIComponent","window","location","search","schema","setSchema","bytes","setBytes","struct","useMemo","JSON","parse","reduce","i","name","String","field","type","createFixedStruct","e","decoded","entries","Object","decode","toBuffer","key","push","fromEntries","gutter","xs","md","style","padding","layout","Item","label","TextArea","value","onChange","target","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ade819b5.chunk.js","sourcesContent":["import {\n  createFixedStruct,\n  Field,\n  formatByteLike,\n  I128BE,\n  I128LE,\n  I16BE,\n  I16LE,\n  I32BE,\n  I32LE,\n  I64BE,\n  I64LE,\n  I8,\n  U128BE,\n  U128LE,\n  U16BE,\n  U16LE,\n  U32BE,\n  U32LE,\n  U64BE,\n  U64LE,\n  U8,\n} from \"easy-byte\";\n\nconst FixedNumeric = {\n  I8,\n  U8,\n  I16BE,\n  I16LE,\n  U16BE,\n  U16LE,\n  I32BE,\n  I32LE,\n  U32BE,\n  U32LE,\n  I64LE,\n  I64BE,\n  U64LE,\n  U64BE,\n  I128BE,\n  I128LE,\n  U128BE,\n  U128LE,\n};\n\ntype Input =\n  | \"I8\"\n  | \"U8\"\n  | \"I16BE\"\n  | \"I16LE\"\n  | \"U16BE\"\n  | \"U16LE\"\n  | \"I32BE\"\n  | \"I32LE\"\n  | \"U32BE\"\n  | \"U32LE\"\n  | \"I64LE\"\n  | \"I64BE\"\n  | \"U64LE\"\n  | \"U64BE\"\n  | \"I128BE\"\n  | \"I128LE\"\n  | \"U128BE\"\n  | \"U128LE\"\n  | string;\n\nconst Bytes: (size: number, le?: boolean) => Field<string> = (size, le) => {\n  return {\n    byteWidth: size,\n    read: (buf, offset = 0) =>\n      formatByteLike(buf.slice(offset, offset + size), { le }),\n    write: (buf, val, offset = 0) =>\n      buf.write(formatByteLike(val, { le, convertEndian: le }), offset, \"hex\"),\n  };\n};\n\ntype FixedStruct = ReturnType<typeof createFixedStruct>;\n\nexport function inputToField(input: Input): Field<unknown> {\n  // @ts-ignore\n  if (FixedNumeric[input]) return FixedNumeric[input];\n\n  const matched = input.match(/(Byte)(\\d+)(BE|LE)?/);\n  if (!matched) throw new Error(`the input ${input} is not valid`);\n\n  const [, , size, beOrLe] = matched;\n  // @ts-ignore\n  return Bytes(Number(size), beOrLe === \"LE\");\n}\n\nexport function createStruct(\n  inputs: ({ name: string; type: Input } | Input)[]\n): FixedStruct {\n  return inputs.reduce<FixedStruct>((struct, input, i) => {\n    const name = typeof input === \"string\" ? String(i) : input.name;\n    const field = typeof input === \"string\" ? input : input.type;\n    return struct.field(name, inputToField(field));\n  }, createFixedStruct());\n}\n","import { Col, Form, Input, Row } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport { toBuffer } from \"easy-byte\";\nimport React, { useMemo, useState } from \"react\";\nimport JSONTree from \"react-json-tree\";\nimport { createStruct } from \"./analyze\";\n\nfunction App() {\n  const [schema, setSchema] = useState<string>(\n    decodeURIComponent(window.location.search.slice(1))\n  );\n  const [bytes, setBytes] = useState<string>(\"\");\n\n  const struct = useMemo(() => {\n    try {\n      const struct = JSON.parse(schema);\n      return createStruct(struct);\n    } catch (e) {\n      return null;\n    }\n  }, [schema]);\n\n  const decoded = useMemo(() => {\n    if (!bytes || !struct) return null;\n    const entries = Object.entries(struct.decode(toBuffer(bytes))).reduce(\n      (entries, [key, val]) => {\n        // @ts-ignore\n        entries.push([key, String(val)]);\n        return entries;\n      },\n      []\n    );\n    return Object.fromEntries(entries);\n  }, [bytes, struct]);\n\n  return (\n    <Row gutter={32}>\n      <Col xs={24} md={12} style={{ padding: \"32px\" }}>\n        <Form size=\"large\" layout=\"vertical\">\n          <Form.Item label=\"schema\">\n            <Input.TextArea\n              value={schema}\n              onChange={(e) => setSchema(e.target.value)}\n            />\n          </Form.Item>\n\n          <Form.Item label=\"input\">\n            <Input.TextArea\n              value={bytes}\n              onChange={(e) => setBytes(e.target.value)}\n            />\n          </Form.Item>\n        </Form>\n      </Col>\n      <Col xs={24} md={12} style={{ padding: \"24px\" }}>\n        <JSONTree data={decoded} />\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}